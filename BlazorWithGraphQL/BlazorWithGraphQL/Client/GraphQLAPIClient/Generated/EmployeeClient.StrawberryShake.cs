// <auto-generated/>
#nullable enable

namespace BlazorWithGraphQL.Client.GraphQLAPIClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeeDataResult : global::System.IEquatable<AddEmployeeDataResult>, IAddEmployeeDataResult
    {
        public AddEmployeeDataResult(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeData_AddEmployee addEmployee)
        {
            AddEmployee = addEmployee;
        }

        /// <summary>
        /// Add a new employee data.
        /// </summary>
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeData_AddEmployee AddEmployee { get; }

        public virtual global::System.Boolean Equals(AddEmployeeDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddEmployee.Equals(other.AddEmployee));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddEmployeeDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddEmployee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeeData_AddEmployee_AddEmployeePayload : global::System.IEquatable<AddEmployeeData_AddEmployee_AddEmployeePayload>, IAddEmployeeData_AddEmployee_AddEmployeePayload
    {
        public AddEmployeeData_AddEmployee_AddEmployeePayload(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeData_AddEmployee_Employee employee)
        {
            Employee = employee;
        }

        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeData_AddEmployee_Employee Employee { get; }

        public virtual global::System.Boolean Equals(AddEmployeeData_AddEmployee_AddEmployeePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Employee.Equals(other.Employee));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddEmployeeData_AddEmployee_AddEmployeePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Employee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeeData_AddEmployee_Employee_Employee : global::System.IEquatable<AddEmployeeData_AddEmployee_Employee_Employee>, IAddEmployeeData_AddEmployee_Employee_Employee
    {
        public AddEmployeeData_AddEmployee_Employee_Employee(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(AddEmployeeData_AddEmployee_Employee_Employee? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddEmployeeData_AddEmployee_Employee_Employee)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IAddEmployeeDataResult
    {
        /// <summary>
        /// Add a new employee data.
        /// </summary>
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeData_AddEmployee AddEmployee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IAddEmployeeData_AddEmployee
    {
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeData_AddEmployee_Employee Employee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IAddEmployeeData_AddEmployee_AddEmployeePayload : IAddEmployeeData_AddEmployee
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IAddEmployeeData_AddEmployee_Employee
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IAddEmployeeData_AddEmployee_Employee_Employee : IAddEmployeeData_AddEmployee_Employee
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class DeleteMovieDataResult : global::System.IEquatable<DeleteMovieDataResult>, IDeleteMovieDataResult
    {
        public DeleteMovieDataResult(global::System.Int32 deleteEmployee)
        {
            DeleteEmployee = deleteEmployee;
        }

        /// <summary>
        /// Delete an employee data.
        /// </summary>
        public global::System.Int32 DeleteEmployee { get; }

        public virtual global::System.Boolean Equals(DeleteMovieDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteEmployee == other.DeleteEmployee);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteMovieDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteEmployee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IDeleteMovieDataResult
    {
        /// <summary>
        /// Delete an employee data.
        /// </summary>
        public global::System.Int32 DeleteEmployee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EditEmployeeDataResult : global::System.IEquatable<EditEmployeeDataResult>, IEditEmployeeDataResult
    {
        public EditEmployeeDataResult(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeData_EditEmployee editEmployee)
        {
            EditEmployee = editEmployee;
        }

        /// <summary>
        /// Edit an existing employee data.
        /// </summary>
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeData_EditEmployee EditEmployee { get; }

        public virtual global::System.Boolean Equals(EditEmployeeDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EditEmployee.Equals(other.EditEmployee));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditEmployeeDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EditEmployee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EditEmployeeData_EditEmployee_AddEmployeePayload : global::System.IEquatable<EditEmployeeData_EditEmployee_AddEmployeePayload>, IEditEmployeeData_EditEmployee_AddEmployeePayload
    {
        public EditEmployeeData_EditEmployee_AddEmployeePayload(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeData_EditEmployee_Employee employee)
        {
            Employee = employee;
        }

        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeData_EditEmployee_Employee Employee { get; }

        public virtual global::System.Boolean Equals(EditEmployeeData_EditEmployee_AddEmployeePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Employee.Equals(other.Employee));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditEmployeeData_EditEmployee_AddEmployeePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Employee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EditEmployeeData_EditEmployee_Employee_Employee : global::System.IEquatable<EditEmployeeData_EditEmployee_Employee_Employee>, IEditEmployeeData_EditEmployee_Employee_Employee
    {
        public EditEmployeeData_EditEmployee_Employee_Employee(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(EditEmployeeData_EditEmployee_Employee_Employee? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditEmployeeData_EditEmployee_Employee_Employee)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IEditEmployeeDataResult
    {
        /// <summary>
        /// Edit an existing employee data.
        /// </summary>
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeData_EditEmployee EditEmployee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IEditEmployeeData_EditEmployee
    {
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeData_EditEmployee_Employee Employee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IEditEmployeeData_EditEmployee_AddEmployeePayload : IEditEmployeeData_EditEmployee
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IEditEmployeeData_EditEmployee_Employee
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IEditEmployeeData_EditEmployee_Employee_Employee : IEditEmployeeData_EditEmployee_Employee
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchCityListResult : global::System.IEquatable<FetchCityListResult>, IFetchCityListResult
    {
        public FetchCityListResult(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityList_CityList> cityList)
        {
            CityList = cityList;
        }

        /// <summary>
        /// Gets the list of cities.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityList_CityList> CityList { get; }

        public virtual global::System.Boolean Equals(FetchCityListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CityList, other.CityList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchCityListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var CityList_elm in CityList)
                {
                    hash ^= 397 * CityList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchCityList_CityList_City : global::System.IEquatable<FetchCityList_CityList_City>, IFetchCityList_CityList_City
    {
        public FetchCityList_CityList_City(global::System.Int32 cityId, global::System.String cityName)
        {
            CityId = cityId;
            CityName = cityName;
        }

        public global::System.Int32 CityId { get; }

        public global::System.String CityName { get; }

        public virtual global::System.Boolean Equals(FetchCityList_CityList_City? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CityId == other.CityId) && CityName.Equals(other.CityName);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchCityList_CityList_City)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CityId.GetHashCode();
                hash ^= 397 * CityName.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFetchCityListResult
    {
        /// <summary>
        /// Gets the list of cities.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityList_CityList> CityList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFetchCityList_CityList
    {
        public global::System.Int32 CityId { get; }

        public global::System.String CityName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFetchCityList_CityList_City : IFetchCityList_CityList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchEmployeeListResult : global::System.IEquatable<FetchEmployeeListResult>, IFetchEmployeeListResult
    {
        public FetchEmployeeListResult(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeList_EmployeeList> employeeList)
        {
            EmployeeList = employeeList;
        }

        /// <summary>
        /// Gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeList_EmployeeList> EmployeeList { get; }

        public virtual global::System.Boolean Equals(FetchEmployeeListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(EmployeeList, other.EmployeeList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchEmployeeListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var EmployeeList_elm in EmployeeList)
                {
                    hash ^= 397 * EmployeeList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchEmployeeList_EmployeeList_Employee : global::System.IEquatable<FetchEmployeeList_EmployeeList_Employee>, IFetchEmployeeList_EmployeeList_Employee
    {
        public FetchEmployeeList_EmployeeList_Employee(global::System.Int32 employeeId, global::System.String name, global::System.String gender, global::System.String department, global::System.String city)
        {
            EmployeeId = employeeId;
            Name = name;
            Gender = gender;
            Department = department;
            City = city;
        }

        public global::System.Int32 EmployeeId { get; }

        public global::System.String Name { get; }

        public global::System.String Gender { get; }

        public global::System.String Department { get; }

        public global::System.String City { get; }

        public virtual global::System.Boolean Equals(FetchEmployeeList_EmployeeList_Employee? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EmployeeId == other.EmployeeId) && Name.Equals(other.Name) && Gender.Equals(other.Gender) && Department.Equals(other.Department) && City.Equals(other.City);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchEmployeeList_EmployeeList_Employee)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EmployeeId.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Gender.GetHashCode();
                hash ^= 397 * Department.GetHashCode();
                hash ^= 397 * City.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFetchEmployeeListResult
    {
        /// <summary>
        /// Gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeList_EmployeeList> EmployeeList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFetchEmployeeList_EmployeeList
    {
        public global::System.Int32 EmployeeId { get; }

        public global::System.String Name { get; }

        public global::System.String Gender { get; }

        public global::System.String Department { get; }

        public global::System.String City { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFetchEmployeeList_EmployeeList_Employee : IFetchEmployeeList_EmployeeList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FilterEmployeeByIDResult : global::System.IEquatable<FilterEmployeeByIDResult>, IFilterEmployeeByIDResult
    {
        public FilterEmployeeByIDResult(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByID_EmployeeList> employeeList)
        {
            EmployeeList = employeeList;
        }

        /// <summary>
        /// Gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByID_EmployeeList> EmployeeList { get; }

        public virtual global::System.Boolean Equals(FilterEmployeeByIDResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(EmployeeList, other.EmployeeList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FilterEmployeeByIDResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var EmployeeList_elm in EmployeeList)
                {
                    hash ^= 397 * EmployeeList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FilterEmployeeByID_EmployeeList_Employee : global::System.IEquatable<FilterEmployeeByID_EmployeeList_Employee>, IFilterEmployeeByID_EmployeeList_Employee
    {
        public FilterEmployeeByID_EmployeeList_Employee(global::System.Int32 employeeId, global::System.String name, global::System.String gender, global::System.String department, global::System.String city)
        {
            EmployeeId = employeeId;
            Name = name;
            Gender = gender;
            Department = department;
            City = city;
        }

        public global::System.Int32 EmployeeId { get; }

        public global::System.String Name { get; }

        public global::System.String Gender { get; }

        public global::System.String Department { get; }

        public global::System.String City { get; }

        public virtual global::System.Boolean Equals(FilterEmployeeByID_EmployeeList_Employee? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EmployeeId == other.EmployeeId) && Name.Equals(other.Name) && Gender.Equals(other.Gender) && Department.Equals(other.Department) && City.Equals(other.City);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FilterEmployeeByID_EmployeeList_Employee)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EmployeeId.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Gender.GetHashCode();
                hash ^= 397 * Department.GetHashCode();
                hash ^= 397 * City.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFilterEmployeeByIDResult
    {
        /// <summary>
        /// Gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByID_EmployeeList> EmployeeList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFilterEmployeeByID_EmployeeList
    {
        public global::System.Int32 EmployeeId { get; }

        public global::System.String Name { get; }

        public global::System.String Gender { get; }

        public global::System.String Department { get; }

        public global::System.String City { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFilterEmployeeByID_EmployeeList_Employee : IFilterEmployeeByID_EmployeeList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EmployeeInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "EmployeeInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput;
            var inputInfo = runtimeValue as global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEmployeeIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("employeeId", FormatEmployeeId(input.EmployeeId)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsCitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("city", FormatCity(input.City)));
            }

            if (inputInfo.IsDepartmentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("department", FormatDepartment(input.Department)));
            }

            if (inputInfo.IsGenderSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gender", FormatGender(input.Gender)));
            }

            return fields;
        }

        private global::System.Object? FormatEmployeeId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatCity(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDepartment(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatGender(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EmployeeInput : global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeInputInfo, global::System.IEquatable<EmployeeInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EmployeeInput)obj);
        }

        public virtual global::System.Boolean Equals(EmployeeInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EmployeeId == other.EmployeeId) && Name.Equals(other.Name) && City.Equals(other.City) && Department.Equals(other.Department) && Gender.Equals(other.Gender);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EmployeeId.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * City.GetHashCode();
                hash ^= 397 * Department.GetHashCode();
                hash ^= 397 * Gender.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_employeeId;
        private global::System.Boolean _set_employeeId;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.String _value_city = default !;
        private global::System.Boolean _set_city;
        private global::System.String _value_department = default !;
        private global::System.Boolean _set_department;
        private global::System.String _value_gender = default !;
        private global::System.Boolean _set_gender;
        public global::System.Int32 EmployeeId
        {
            get => _value_employeeId;
            set
            {
                _set_employeeId = true;
                _value_employeeId = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeInputInfo.IsEmployeeIdSet => _set_employeeId;
        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeInputInfo.IsNameSet => _set_name;
        public global::System.String City
        {
            get => _value_city;
            set
            {
                _set_city = true;
                _value_city = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeInputInfo.IsCitySet => _set_city;
        public global::System.String Department
        {
            get => _value_department;
            set
            {
                _set_department = true;
                _value_department = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeInputInfo.IsDepartmentSet => _set_department;
        public global::System.String Gender
        {
            get => _value_gender;
            set
            {
                _set_gender = true;
                _value_gender = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeInputInfo.IsGenderSet => _set_gender;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EmployeeFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _employeeFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _comparableInt32OperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        public global::System.String TypeName => "EmployeeFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _employeeFilterInputFormatter = serializerResolver.GetInputValueFormatter("EmployeeFilterInput");
            _comparableInt32OperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("ComparableInt32OperationFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput;
            var inputInfo = runtimeValue as global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsEmployeeIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("employeeId", FormatEmployeeId(input.EmployeeId)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsCitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("city", FormatCity(input.City)));
            }

            if (inputInfo.IsDepartmentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("department", FormatDepartment(input.Department)));
            }

            if (inputInfo.IsGenderSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gender", FormatGender(input.Gender)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_employeeFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_employeeFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatEmployeeId(global::BlazorWithGraphQL.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableInt32OperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCity(global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDepartment(global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGender(global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EmployeeFilterInput : global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo, global::System.IEquatable<EmployeeFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EmployeeFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(EmployeeFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((EmployeeId is null && other.EmployeeId is null) || EmployeeId != null && EmployeeId.Equals(other.EmployeeId)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((City is null && other.City is null) || City != null && City.Equals(other.City)) && ((Department is null && other.Department is null) || Department != null && Department.Equals(other.Department)) && ((Gender is null && other.Gender is null) || Gender != null && Gender.Equals(other.Gender));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (EmployeeId != null)
                {
                    hash ^= 397 * EmployeeId.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (City != null)
                {
                    hash ^= 397 * City.GetHashCode();
                }

                if (Department != null)
                {
                    hash ^= 397 * Department.GetHashCode();
                }

                if (Gender != null)
                {
                    hash ^= 397 * Gender.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? _value_employeeId;
        private global::System.Boolean _set_employeeId;
        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? _value_city;
        private global::System.Boolean _set_city;
        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? _value_department;
        private global::System.Boolean _set_department;
        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? _value_gender;
        private global::System.Boolean _set_gender;
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo.IsOrSet => _set_or;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? EmployeeId
        {
            get => _value_employeeId;
            set
            {
                _set_employeeId = true;
                _value_employeeId = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo.IsEmployeeIdSet => _set_employeeId;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo.IsNameSet => _set_name;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? City
        {
            get => _value_city;
            set
            {
                _set_city = true;
                _value_city = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo.IsCitySet => _set_city;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? Department
        {
            get => _value_department;
            set
            {
                _set_department = true;
                _value_department = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo.IsDepartmentSet => _set_department;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput? Gender
        {
            get => _value_gender;
            set
            {
                _set_gender = true;
                _value_gender = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IEmployeeFilterInputInfo.IsGenderSet => _set_gender;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class ComparableInt32OperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "ComparableInt32OperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::BlazorWithGraphQL.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput;
            var inputInfo = runtimeValue as global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsGtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gt", FormatGt(input.Gt)));
            }

            if (inputInfo.IsNgtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngt", FormatNgt(input.Ngt)));
            }

            if (inputInfo.IsGteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gte", FormatGte(input.Gte)));
            }

            if (inputInfo.IsNgteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngte", FormatNgte(input.Ngte)));
            }

            if (inputInfo.IsLtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lt", FormatLt(input.Lt)));
            }

            if (inputInfo.IsNltSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlt", FormatNlt(input.Nlt)));
            }

            if (inputInfo.IsLteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lte", FormatLte(input.Lte)));
            }

            if (inputInfo.IsNlteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlte", FormatNlte(input.Nlte)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_intFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_intFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatGt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class ComparableInt32OperationFilterInput : global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo, global::System.IEquatable<ComparableInt32OperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ComparableInt32OperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ComparableInt32OperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Eq == other.Eq) && Neq == other.Neq && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && Gt == other.Gt && Ngt == other.Ngt && Gte == other.Gte && Ngte == other.Ngte && Lt == other.Lt && Nlt == other.Nlt && Lte == other.Lte && Nlte == other.Nlte;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        hash ^= 397 * In_elm.GetHashCode();
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        hash ^= 397 * Nin_elm.GetHashCode();
                    }
                }

                if (Gt != null)
                {
                    hash ^= 397 * Gt.GetHashCode();
                }

                if (Ngt != null)
                {
                    hash ^= 397 * Ngt.GetHashCode();
                }

                if (Gte != null)
                {
                    hash ^= 397 * Gte.GetHashCode();
                }

                if (Ngte != null)
                {
                    hash ^= 397 * Ngte.GetHashCode();
                }

                if (Lt != null)
                {
                    hash ^= 397 * Lt.GetHashCode();
                }

                if (Nlt != null)
                {
                    hash ^= 397 * Nlt.GetHashCode();
                }

                if (Lte != null)
                {
                    hash ^= 397 * Lte.GetHashCode();
                }

                if (Nlte != null)
                {
                    hash ^= 397 * Nlte.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.Int32? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.Int32? _value_gt;
        private global::System.Boolean _set_gt;
        private global::System.Int32? _value_ngt;
        private global::System.Boolean _set_ngt;
        private global::System.Int32? _value_gte;
        private global::System.Boolean _set_gte;
        private global::System.Int32? _value_ngte;
        private global::System.Boolean _set_ngte;
        private global::System.Int32? _value_lt;
        private global::System.Boolean _set_lt;
        private global::System.Int32? _value_nlt;
        private global::System.Boolean _set_nlt;
        private global::System.Int32? _value_lte;
        private global::System.Boolean _set_lte;
        private global::System.Int32? _value_nlte;
        private global::System.Boolean _set_nlte;
        public global::System.Int32? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.Int32? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNinSet => _set_nin;
        public global::System.Int32? Gt
        {
            get => _value_gt;
            set
            {
                _set_gt = true;
                _value_gt = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsGtSet => _set_gt;
        public global::System.Int32? Ngt
        {
            get => _value_ngt;
            set
            {
                _set_ngt = true;
                _value_ngt = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNgtSet => _set_ngt;
        public global::System.Int32? Gte
        {
            get => _value_gte;
            set
            {
                _set_gte = true;
                _value_gte = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsGteSet => _set_gte;
        public global::System.Int32? Ngte
        {
            get => _value_ngte;
            set
            {
                _set_ngte = true;
                _value_ngte = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNgteSet => _set_ngte;
        public global::System.Int32? Lt
        {
            get => _value_lt;
            set
            {
                _set_lt = true;
                _value_lt = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsLtSet => _set_lt;
        public global::System.Int32? Nlt
        {
            get => _value_nlt;
            set
            {
                _set_nlt = true;
                _value_nlt = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNltSet => _set_nlt;
        public global::System.Int32? Lte
        {
            get => _value_lte;
            set
            {
                _set_lte = true;
                _value_lte = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsLteSet => _set_lte;
        public global::System.Int32? Nlte
        {
            get => _value_nlte;
            set
            {
                _set_nlte = true;
                _value_nlte = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNlteSet => _set_nlte;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class StringOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "StringOperationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput;
            var inputInfo = runtimeValue as global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsContainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("contains", FormatContains(input.Contains)));
            }

            if (inputInfo.IsNcontainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ncontains", FormatNcontains(input.Ncontains)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsStartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("startsWith", FormatStartsWith(input.StartsWith)));
            }

            if (inputInfo.IsNstartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nstartsWith", FormatNstartsWith(input.NstartsWith)));
            }

            if (inputInfo.IsEndsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("endsWith", FormatEndsWith(input.EndsWith)));
            }

            if (inputInfo.IsNendsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nendsWith", FormatNendsWith(input.NendsWith)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatEq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatContains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNcontains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatStartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNstartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEndsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNendsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class StringOperationFilterInput : global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo, global::System.IEquatable<StringOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StringOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(StringOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq)) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && ((Contains is null && other.Contains is null) || Contains != null && Contains.Equals(other.Contains)) && ((Ncontains is null && other.Ncontains is null) || Ncontains != null && Ncontains.Equals(other.Ncontains)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && ((StartsWith is null && other.StartsWith is null) || StartsWith != null && StartsWith.Equals(other.StartsWith)) && ((NstartsWith is null && other.NstartsWith is null) || NstartsWith != null && NstartsWith.Equals(other.NstartsWith)) && ((EndsWith is null && other.EndsWith is null) || EndsWith != null && EndsWith.Equals(other.EndsWith)) && ((NendsWith is null && other.NendsWith is null) || NendsWith != null && NendsWith.Equals(other.NendsWith));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (Contains != null)
                {
                    hash ^= 397 * Contains.GetHashCode();
                }

                if (Ncontains != null)
                {
                    hash ^= 397 * Ncontains.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        if (In_elm != null)
                        {
                            hash ^= 397 * In_elm.GetHashCode();
                        }
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        if (Nin_elm != null)
                        {
                            hash ^= 397 * Nin_elm.GetHashCode();
                        }
                    }
                }

                if (StartsWith != null)
                {
                    hash ^= 397 * StartsWith.GetHashCode();
                }

                if (NstartsWith != null)
                {
                    hash ^= 397 * NstartsWith.GetHashCode();
                }

                if (EndsWith != null)
                {
                    hash ^= 397 * EndsWith.GetHashCode();
                }

                if (NendsWith != null)
                {
                    hash ^= 397 * NendsWith.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::System.String? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.String? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.String? _value_contains;
        private global::System.Boolean _set_contains;
        private global::System.String? _value_ncontains;
        private global::System.Boolean _set_ncontains;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.String? _value_startsWith;
        private global::System.Boolean _set_startsWith;
        private global::System.String? _value_nstartsWith;
        private global::System.Boolean _set_nstartsWith;
        private global::System.String? _value_endsWith;
        private global::System.Boolean _set_endsWith;
        private global::System.String? _value_nendsWith;
        private global::System.Boolean _set_nendsWith;
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsAndSet => _set_and;
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsOrSet => _set_or;
        public global::System.String? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsEqSet => _set_eq;
        public global::System.String? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNeqSet => _set_neq;
        public global::System.String? Contains
        {
            get => _value_contains;
            set
            {
                _set_contains = true;
                _value_contains = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsContainsSet => _set_contains;
        public global::System.String? Ncontains
        {
            get => _value_ncontains;
            set
            {
                _set_ncontains = true;
                _value_ncontains = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNcontainsSet => _set_ncontains;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsInSet => _set_in;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNinSet => _set_nin;
        public global::System.String? StartsWith
        {
            get => _value_startsWith;
            set
            {
                _set_startsWith = true;
                _value_startsWith = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsStartsWithSet => _set_startsWith;
        public global::System.String? NstartsWith
        {
            get => _value_nstartsWith;
            set
            {
                _set_nstartsWith = true;
                _value_nstartsWith = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNstartsWithSet => _set_nstartsWith;
        public global::System.String? EndsWith
        {
            get => _value_endsWith;
            set
            {
                _set_endsWith = true;
                _value_endsWith = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsEndsWithSet => _set_endsWith;
        public global::System.String? NendsWith
        {
            get => _value_nendsWith;
            set
            {
                _set_nendsWith = true;
                _value_nendsWith = value;
            }
        }

        global::System.Boolean global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNendsWithSet => _set_nendsWith;
    }

    /// <summary>
    /// Represents the operation service of the AddEmployeeData GraphQL operation
    /// <code>
    /// mutation AddEmployeeData($employeeData: EmployeeInput!) {
    ///   addEmployee(employee: $employeeData) {
    ///     __typename
    ///     employee {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeeDataMutationDocument : global::StrawberryShake.IDocument
    {
        private AddEmployeeDataMutationDocument()
        {
        }

        public static AddEmployeeDataMutationDocument Instance { get; } = new AddEmployeeDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x28, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a581c5ac5a28f7682840004cac22fdb8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddEmployeeData GraphQL operation
    /// <code>
    /// mutation AddEmployeeData($employeeData: EmployeeInput!) {
    ///   addEmployee(employee: $employeeData) {
    ///     __typename
    ///     employee {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeeDataMutation : global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddEmployeeDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _employeeInputFormatter;
        public AddEmployeeDataMutation(global::StrawberryShake.IOperationExecutor<IAddEmployeeDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _employeeInputFormatter = serializerResolver.GetInputValueFormatter("EmployeeInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddEmployeeDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddEmployeeDataResult>> ExecuteAsync(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(employeeData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddEmployeeDataResult>> Watch(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(employeeData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("employeeData", FormatEmployeeData(employeeData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddEmployeeDataMutationDocument.Instance.Hash.Value, name: "AddEmployeeData", document: AddEmployeeDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmployeeData(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _employeeInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddEmployeeData GraphQL operation
    /// <code>
    /// mutation AddEmployeeData($employeeData: EmployeeInput!) {
    ///   addEmployee(employee: $employeeData) {
    ///     __typename
    ///     employee {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IAddEmployeeDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddEmployeeDataResult>> ExecuteAsync(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddEmployeeDataResult>> Watch(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteMovieData GraphQL operation
    /// <code>
    /// mutation DeleteMovieData($employeeId: Int!) {
    ///   deleteEmployee(employeeId: $employeeId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class DeleteMovieDataMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteMovieDataMutationDocument()
        {
        }

        public static DeleteMovieDataMutationDocument Instance { get; } = new DeleteMovieDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x28, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "01ae4cce64d6e4dfc7b6ccc509b6dee0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteMovieData GraphQL operation
    /// <code>
    /// mutation DeleteMovieData($employeeId: Int!) {
    ///   deleteEmployee(employeeId: $employeeId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class DeleteMovieDataMutation : global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteMovieDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DeleteMovieDataMutation(global::StrawberryShake.IOperationExecutor<IDeleteMovieDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteMovieDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteMovieDataResult>> ExecuteAsync(global::System.Int32 employeeId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(employeeId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteMovieDataResult>> Watch(global::System.Int32 employeeId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(employeeId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 employeeId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("employeeId", FormatEmployeeId(employeeId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteMovieDataMutationDocument.Instance.Hash.Value, name: "DeleteMovieData", document: DeleteMovieDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmployeeId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteMovieData GraphQL operation
    /// <code>
    /// mutation DeleteMovieData($employeeId: Int!) {
    ///   deleteEmployee(employeeId: $employeeId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IDeleteMovieDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteMovieDataResult>> ExecuteAsync(global::System.Int32 employeeId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteMovieDataResult>> Watch(global::System.Int32 employeeId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the EditEmployeeData GraphQL operation
    /// <code>
    /// mutation EditEmployeeData($employeeData: EmployeeInput!) {
    ///   editEmployee(employee: $employeeData) {
    ///     __typename
    ///     employee {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EditEmployeeDataMutationDocument : global::StrawberryShake.IDocument
    {
        private EditEmployeeDataMutationDocument()
        {
        }

        public static EditEmployeeDataMutationDocument Instance { get; } = new EditEmployeeDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x64, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x64, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x28, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bc5f597dd3a65863a3979db60837b2f2");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the EditEmployeeData GraphQL operation
    /// <code>
    /// mutation EditEmployeeData($employeeData: EmployeeInput!) {
    ///   editEmployee(employee: $employeeData) {
    ///     __typename
    ///     employee {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EditEmployeeDataMutation : global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IEditEmployeeDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _employeeInputFormatter;
        public EditEmployeeDataMutation(global::StrawberryShake.IOperationExecutor<IEditEmployeeDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _employeeInputFormatter = serializerResolver.GetInputValueFormatter("EmployeeInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IEditEmployeeDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEditEmployeeDataResult>> ExecuteAsync(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(employeeData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IEditEmployeeDataResult>> Watch(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(employeeData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("employeeData", FormatEmployeeData(employeeData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: EditEmployeeDataMutationDocument.Instance.Hash.Value, name: "EditEmployeeData", document: EditEmployeeDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmployeeData(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _employeeInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the EditEmployeeData GraphQL operation
    /// <code>
    /// mutation EditEmployeeData($employeeData: EmployeeInput!) {
    ///   editEmployee(employee: $employeeData) {
    ///     __typename
    ///     employee {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IEditEmployeeDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEditEmployeeDataResult>> ExecuteAsync(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IEditEmployeeDataResult>> Watch(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInput employeeData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchCityList GraphQL operation
    /// <code>
    /// query FetchCityList {
    ///   cityList {
    ///     __typename
    ///     cityId
    ///     cityName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchCityListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchCityListQueryDocument()
        {
        }

        public static FetchCityListQueryDocument Instance { get; } = new FetchCityListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x20, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "452d8de4b848dd49bbcd0972d11dc154");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchCityList GraphQL operation
    /// <code>
    /// query FetchCityList {
    ///   cityList {
    ///     __typename
    ///     cityId
    ///     cityName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchCityListQuery : global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchCityListResult> _operationExecutor;
        public FetchCityListQuery(global::StrawberryShake.IOperationExecutor<IFetchCityListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchCityListResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchCityListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchCityListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchCityListQueryDocument.Instance.Hash.Value, name: "FetchCityList", document: FetchCityListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchCityList GraphQL operation
    /// <code>
    /// query FetchCityList {
    ///   cityList {
    ///     __typename
    ///     cityId
    ///     cityName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFetchCityListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchCityListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchCityListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchEmployeeList GraphQL operation
    /// <code>
    /// query FetchEmployeeList {
    ///   employeeList {
    ///     __typename
    ///     employeeId
    ///     name
    ///     gender
    ///     department
    ///     city
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchEmployeeListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchEmployeeListQueryDocument()
        {
        }

        public static FetchEmployeeListQueryDocument Instance { get; } = new FetchEmployeeListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x69, 0x74, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "53e6d0cb65e4b760311c6746d51cc273");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchEmployeeList GraphQL operation
    /// <code>
    /// query FetchEmployeeList {
    ///   employeeList {
    ///     __typename
    ///     employeeId
    ///     name
    ///     gender
    ///     department
    ///     city
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchEmployeeListQuery : global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchEmployeeListResult> _operationExecutor;
        public FetchEmployeeListQuery(global::StrawberryShake.IOperationExecutor<IFetchEmployeeListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchEmployeeListResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchEmployeeListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchEmployeeListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchEmployeeListQueryDocument.Instance.Hash.Value, name: "FetchEmployeeList", document: FetchEmployeeListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchEmployeeList GraphQL operation
    /// <code>
    /// query FetchEmployeeList {
    ///   employeeList {
    ///     __typename
    ///     employeeId
    ///     name
    ///     gender
    ///     department
    ///     city
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFetchEmployeeListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchEmployeeListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchEmployeeListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FilterEmployeeByID GraphQL operation
    /// <code>
    /// query FilterEmployeeByID($filterInput: EmployeeFilterInput) {
    ///   employeeList(where: $filterInput) {
    ///     __typename
    ///     employeeId
    ///     name
    ///     gender
    ///     department
    ///     city
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FilterEmployeeByIDQueryDocument : global::StrawberryShake.IDocument
    {
        private FilterEmployeeByIDQueryDocument()
        {
        }

        public static FilterEmployeeByIDQueryDocument Instance { get; } = new FilterEmployeeByIDQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x79, 0x49, 0x44, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x69, 0x74, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a51f8f4aa96d894bf986718679157318");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FilterEmployeeByID GraphQL operation
    /// <code>
    /// query FilterEmployeeByID($filterInput: EmployeeFilterInput) {
    ///   employeeList(where: $filterInput) {
    ///     __typename
    ///     employeeId
    ///     name
    ///     gender
    ///     department
    ///     city
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FilterEmployeeByIDQuery : global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFilterEmployeeByIDResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _employeeFilterInputFormatter;
        public FilterEmployeeByIDQuery(global::StrawberryShake.IOperationExecutor<IFilterEmployeeByIDResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _employeeFilterInputFormatter = serializerResolver.GetInputValueFormatter("EmployeeFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFilterEmployeeByIDResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFilterEmployeeByIDResult>> ExecuteAsync(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput? filterInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filterInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFilterEmployeeByIDResult>> Watch(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput? filterInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filterInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput? filterInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filterInput", FormatFilterInput(filterInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FilterEmployeeByIDQueryDocument.Instance.Hash.Value, name: "FilterEmployeeByID", document: FilterEmployeeByIDQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilterInput(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _employeeFilterInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the FilterEmployeeByID GraphQL operation
    /// <code>
    /// query FilterEmployeeByID($filterInput: EmployeeFilterInput) {
    ///   employeeList(where: $filterInput) {
    ///     __typename
    ///     employeeId
    ///     name
    ///     gender
    ///     department
    ///     city
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IFilterEmployeeByIDQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFilterEmployeeByIDResult>> ExecuteAsync(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput? filterInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFilterEmployeeByIDResult>> Watch(global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInput? filterInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the EmployeeClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EmployeeClient : global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEmployeeClient
    {
        private readonly global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataMutation _addEmployeeData;
        private readonly global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataMutation _deleteMovieData;
        private readonly global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataMutation _editEmployeeData;
        private readonly global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListQuery _fetchCityList;
        private readonly global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListQuery _fetchEmployeeList;
        private readonly global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDQuery _filterEmployeeByID;
        public EmployeeClient(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataMutation addEmployeeData, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataMutation deleteMovieData, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataMutation editEmployeeData, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListQuery fetchCityList, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListQuery fetchEmployeeList, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDQuery filterEmployeeByID)
        {
            _addEmployeeData = addEmployeeData ?? throw new global::System.ArgumentNullException(nameof(addEmployeeData));
            _deleteMovieData = deleteMovieData ?? throw new global::System.ArgumentNullException(nameof(deleteMovieData));
            _editEmployeeData = editEmployeeData ?? throw new global::System.ArgumentNullException(nameof(editEmployeeData));
            _fetchCityList = fetchCityList ?? throw new global::System.ArgumentNullException(nameof(fetchCityList));
            _fetchEmployeeList = fetchEmployeeList ?? throw new global::System.ArgumentNullException(nameof(fetchEmployeeList));
            _filterEmployeeByID = filterEmployeeByID ?? throw new global::System.ArgumentNullException(nameof(filterEmployeeByID));
        }

        public static global::System.String ClientName => "EmployeeClient";
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataMutation AddEmployeeData => _addEmployeeData;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataMutation DeleteMovieData => _deleteMovieData;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataMutation EditEmployeeData => _editEmployeeData;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListQuery FetchCityList => _fetchCityList;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListQuery FetchEmployeeList => _fetchEmployeeList;
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDQuery FilterEmployeeByID => _filterEmployeeByID;
    }

    /// <summary>
    /// Represents the EmployeeClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial interface IEmployeeClient
    {
        global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataMutation AddEmployeeData { get; }

        global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataMutation DeleteMovieData { get; }

        global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataMutation EditEmployeeData { get; }

        global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListQuery FetchCityList { get; }

        global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListQuery FetchEmployeeList { get; }

        global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDQuery FilterEmployeeByID { get; }
    }
}

namespace BlazorWithGraphQL.Client.GraphQLAPIClient.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeeDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.AddEmployeeDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddEmployeeDataResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult);
        public AddEmployeeDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddEmployeeDataResultInfo info)
            {
                return new AddEmployeeDataResult(MapNonNullableIAddEmployeeData_AddEmployee(info.AddEmployee, snapshot));
            }

            throw new global::System.ArgumentException("AddEmployeeDataResultInfo expected.");
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeData_AddEmployee MapNonNullableIAddEmployeeData_AddEmployee(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddEmployeeData_AddEmployee returnValue = default !;
            if (data.__typename.Equals("AddEmployeePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddEmployeeData_AddEmployee_AddEmployeePayload(MapNonNullableIAddEmployeeData_AddEmployee_Employee(data.Employee ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeData_AddEmployee_Employee MapNonNullableIAddEmployeeData_AddEmployee_Employee(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddEmployeeData_AddEmployee_Employee returnValue = default !;
            if (data.__typename.Equals("Employee", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddEmployeeData_AddEmployee_Employee_Employee(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeeDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddEmployeeDataResultInfo(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData addEmployee, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddEmployee = addEmployee;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Add a new employee data.
        /// </summary>
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData AddEmployee { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddEmployeeDataResultInfo(AddEmployee, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class DeleteMovieDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.DeleteMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteMovieDataResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult);
        public DeleteMovieDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteMovieDataResultInfo info)
            {
                return new DeleteMovieDataResult(info.DeleteEmployee);
            }

            throw new global::System.ArgumentException("DeleteMovieDataResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class DeleteMovieDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteMovieDataResultInfo(global::System.Int32 deleteEmployee, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteEmployee = deleteEmployee;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Delete an employee data.
        /// </summary>
        public global::System.Int32 DeleteEmployee { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteMovieDataResultInfo(DeleteEmployee, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EditEmployeeDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EditEmployeeDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public EditEmployeeDataResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult);
        public EditEmployeeDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is EditEmployeeDataResultInfo info)
            {
                return new EditEmployeeDataResult(MapNonNullableIEditEmployeeData_EditEmployee(info.EditEmployee, snapshot));
            }

            throw new global::System.ArgumentException("EditEmployeeDataResultInfo expected.");
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeData_EditEmployee MapNonNullableIEditEmployeeData_EditEmployee(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IEditEmployeeData_EditEmployee returnValue = default !;
            if (data.__typename.Equals("AddEmployeePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new EditEmployeeData_EditEmployee_AddEmployeePayload(MapNonNullableIEditEmployeeData_EditEmployee_Employee(data.Employee ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeData_EditEmployee_Employee MapNonNullableIEditEmployeeData_EditEmployee_Employee(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IEditEmployeeData_EditEmployee_Employee returnValue = default !;
            if (data.__typename.Equals("Employee", global::System.StringComparison.Ordinal))
            {
                returnValue = new EditEmployeeData_EditEmployee_Employee_Employee(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EditEmployeeDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public EditEmployeeDataResultInfo(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData editEmployee, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            EditEmployee = editEmployee;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Edit an existing employee data.
        /// </summary>
        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData EditEmployee { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new EditEmployeeDataResultInfo(EditEmployee, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchCityListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FetchCityListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchCityListResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult);
        public FetchCityListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchCityListResultInfo info)
            {
                return new FetchCityListResult(MapNonNullableIFetchCityList_CityListNonNullableArray(info.CityList, snapshot));
            }

            throw new global::System.ArgumentException("FetchCityListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityList_CityList> MapNonNullableIFetchCityList_CityListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var citys = new global::System.Collections.Generic.List<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityList_CityList>();
            foreach (global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData child in list)
            {
                citys.Add(MapNonNullableIFetchCityList_CityList(child, snapshot));
            }

            return citys;
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityList_CityList MapNonNullableIFetchCityList_CityList(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFetchCityList_CityList returnValue = default !;
            if (data.__typename.Equals("City", global::System.StringComparison.Ordinal))
            {
                returnValue = new FetchCityList_CityList_City(data.CityId ?? throw new global::System.ArgumentNullException(), data.CityName ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchCityListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchCityListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData> cityList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CityList = cityList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets the list of cities.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData> CityList { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchCityListResultInfo(CityList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchEmployeeListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FetchEmployeeListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchEmployeeListResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult);
        public FetchEmployeeListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchEmployeeListResultInfo info)
            {
                return new FetchEmployeeListResult(MapNonNullableIFetchEmployeeList_EmployeeListNonNullableArray(info.EmployeeList, snapshot));
            }

            throw new global::System.ArgumentException("FetchEmployeeListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeList_EmployeeList> MapNonNullableIFetchEmployeeList_EmployeeListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var employees = new global::System.Collections.Generic.List<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeList_EmployeeList>();
            foreach (global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData child in list)
            {
                employees.Add(MapNonNullableIFetchEmployeeList_EmployeeList(child, snapshot));
            }

            return employees;
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeList_EmployeeList MapNonNullableIFetchEmployeeList_EmployeeList(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFetchEmployeeList_EmployeeList returnValue = default !;
            if (data.__typename.Equals("Employee", global::System.StringComparison.Ordinal))
            {
                returnValue = new FetchEmployeeList_EmployeeList_Employee(data.EmployeeId ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Gender ?? throw new global::System.ArgumentNullException(), data.Department ?? throw new global::System.ArgumentNullException(), data.City ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchEmployeeListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchEmployeeListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData> employeeList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            EmployeeList = employeeList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData> EmployeeList { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchEmployeeListResultInfo(EmployeeList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FilterEmployeeByIDResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FilterEmployeeByIDResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FilterEmployeeByIDResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult);
        public FilterEmployeeByIDResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FilterEmployeeByIDResultInfo info)
            {
                return new FilterEmployeeByIDResult(MapNonNullableIFilterEmployeeByID_EmployeeListNonNullableArray(info.EmployeeList, snapshot));
            }

            throw new global::System.ArgumentException("FilterEmployeeByIDResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByID_EmployeeList> MapNonNullableIFilterEmployeeByID_EmployeeListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var employees = new global::System.Collections.Generic.List<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByID_EmployeeList>();
            foreach (global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData child in list)
            {
                employees.Add(MapNonNullableIFilterEmployeeByID_EmployeeList(child, snapshot));
            }

            return employees;
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByID_EmployeeList MapNonNullableIFilterEmployeeByID_EmployeeList(global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFilterEmployeeByID_EmployeeList returnValue = default !;
            if (data.__typename.Equals("Employee", global::System.StringComparison.Ordinal))
            {
                returnValue = new FilterEmployeeByID_EmployeeList_Employee(data.EmployeeId ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Gender ?? throw new global::System.ArgumentNullException(), data.Department ?? throw new global::System.ArgumentNullException(), data.City ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FilterEmployeeByIDResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FilterEmployeeByIDResultInfo(global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData> employeeList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            EmployeeList = employeeList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData> EmployeeList { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FilterEmployeeByIDResultInfo(EmployeeList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    internal interface IEmployeeInputInfo
    {
        global::System.Boolean IsEmployeeIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsCitySet { get; }

        global::System.Boolean IsDepartmentSet { get; }

        global::System.Boolean IsGenderSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    internal interface IEmployeeFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsEmployeeIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsCitySet { get; }

        global::System.Boolean IsDepartmentSet { get; }

        global::System.Boolean IsGenderSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    internal interface IComparableInt32OperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsGtSet { get; }

        global::System.Boolean IsNgtSet { get; }

        global::System.Boolean IsGteSet { get; }

        global::System.Boolean IsNgteSet { get; }

        global::System.Boolean IsLtSet { get; }

        global::System.Boolean IsNltSet { get; }

        global::System.Boolean IsLteSet { get; }

        global::System.Boolean IsNlteSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    internal interface IStringOperationFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsContainsSet { get; }

        global::System.Boolean IsNcontainsSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsStartsWithSet { get; }

        global::System.Boolean IsNstartsWithSet { get; }

        global::System.Boolean IsEndsWithSet { get; }

        global::System.Boolean IsNendsWithSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeeDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AddEmployeeDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddEmployeeDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddEmployeeDataResult Result, AddEmployeeDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddEmployeeDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddEmployeeDataResult, AddEmployeeDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddEmployeeDataResultInfo(DeserializeNonNullableIAddEmployeeData_AddEmployee(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addEmployee")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData DeserializeNonNullableIAddEmployeeData_AddEmployee(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddEmployeePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData(typename, employee: DeserializeNonNullableIAddEmployeeData_AddEmployee_Employee(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employee")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData DeserializeNonNullableIAddEmployeeData_AddEmployee_Employee(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Employee", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class DeleteMovieDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public DeleteMovieDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteMovieDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteMovieDataResult Result, DeleteMovieDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeleteMovieDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteMovieDataResult, DeleteMovieDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteMovieDataResultInfo(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteEmployee")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EditEmployeeDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public EditEmployeeDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IEditEmployeeDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IEditEmployeeDataResult Result, EditEmployeeDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IEditEmployeeDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IEditEmployeeDataResult, EditEmployeeDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new EditEmployeeDataResultInfo(DeserializeNonNullableIEditEmployeeData_EditEmployee(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "editEmployee")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData DeserializeNonNullableIEditEmployeeData_EditEmployee(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddEmployeePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeePayloadData(typename, employee: DeserializeNonNullableIEditEmployeeData_EditEmployee_Employee(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employee")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData DeserializeNonNullableIEditEmployeeData_EditEmployee_Employee(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Employee", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchCityListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public FetchCityListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchCityListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchCityListResult Result, FetchCityListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchCityListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchCityListResult, FetchCityListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchCityListResultInfo(DeserializeNonNullableIFetchCityList_CityListNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cityList")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData> DeserializeNonNullableIFetchCityList_CityListNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var citys = new global::System.Collections.Generic.List<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                citys.Add(DeserializeNonNullableIFetchCityList_CityList(child));
            }

            return citys;
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData DeserializeNonNullableIFetchCityList_CityList(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("City", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.CityData(typename, cityId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cityId")), cityName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cityName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FetchEmployeeListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public FetchEmployeeListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchEmployeeListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchEmployeeListResult Result, FetchEmployeeListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchEmployeeListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchEmployeeListResult, FetchEmployeeListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchEmployeeListResultInfo(DeserializeNonNullableIFetchEmployeeList_EmployeeListNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employeeList")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData> DeserializeNonNullableIFetchEmployeeList_EmployeeListNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var employees = new global::System.Collections.Generic.List<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                employees.Add(DeserializeNonNullableIFetchEmployeeList_EmployeeList(child));
            }

            return employees;
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData DeserializeNonNullableIFetchEmployeeList_EmployeeList(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Employee", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData(typename, employeeId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employeeId")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), gender: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gender")), department: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "department")), city: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class FilterEmployeeByIDBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public FilterEmployeeByIDBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IFilterEmployeeByIDResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFilterEmployeeByIDResult Result, FilterEmployeeByIDResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IFilterEmployeeByIDResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFilterEmployeeByIDResult, FilterEmployeeByIDResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FilterEmployeeByIDResultInfo(DeserializeNonNullableIFilterEmployeeByID_EmployeeListNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employeeList")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData> DeserializeNonNullableIFilterEmployeeByID_EmployeeListNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var employees = new global::System.Collections.Generic.List<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                employees.Add(DeserializeNonNullableIFilterEmployeeByID_EmployeeList(child));
            }

            return employees;
        }

        private global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData DeserializeNonNullableIFilterEmployeeByID_EmployeeList(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Employee", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData(typename, employeeId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employeeId")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), gender: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gender")), department: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "department")), city: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class AddEmployeePayloadData
    {
        public AddEmployeePayloadData(global::System.String __typename, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData? employee = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Employee = employee;
        }

        public global::System.String __typename { get; }

        public global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeData? Employee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EmployeeData
    {
        public EmployeeData(global::System.String __typename, global::System.String? name = default !, global::System.Int32? employeeId = default !, global::System.String? gender = default !, global::System.String? department = default !, global::System.String? city = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            EmployeeId = employeeId;
            Gender = gender;
            Department = department;
            City = city;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.Int32? EmployeeId { get; }

        public global::System.String? Gender { get; }

        public global::System.String? Department { get; }

        public global::System.String? City { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class CityData
    {
        public CityData(global::System.String __typename, global::System.Int32? cityId = default !, global::System.String? cityName = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CityId = cityId;
            CityName = cityName;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? CityId { get; }

        public global::System.String? CityName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EmployeeClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public partial class EmployeeClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public EmployeeClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.14.0.0")]
    public static partial class EmployeeClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeClientStoreAccessor> AddEmployeeClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.AddEmployeeDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.DeleteMovieDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EditEmployeeDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FetchCityListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FetchEmployeeListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FilterEmployeeByIDQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEmployeeClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeClientStoreAccessor>("EmployeeClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("EmployeeClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::BlazorWithGraphQL.Client.GraphQLAPIClient.ComparableInt32OperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::BlazorWithGraphQL.Client.GraphQLAPIClient.StringOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeeDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.AddEmployeeDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.AddEmployeeDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IAddEmployeeDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.AddEmployeeDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.DeleteMovieDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.DeleteMovieDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.DeleteMovieDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IDeleteMovieDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.DeleteMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EditEmployeeDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EditEmployeeDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EditEmployeeDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEditEmployeeDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EditEmployeeDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.FetchCityListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.FetchCityListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FetchCityListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchCityListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FetchCityListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.FetchEmployeeListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.FetchEmployeeListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FetchEmployeeListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFetchEmployeeListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FetchEmployeeListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.FilterEmployeeByIDResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult>, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.FilterEmployeeByIDBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FilterEmployeeByIDQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IFilterEmployeeByIDQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.FilterEmployeeByIDQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::BlazorWithGraphQL.Client.GraphQLAPIClient.State.EmployeeClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorWithGraphQL.Client.GraphQLAPIClient.IEmployeeClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorWithGraphQL.Client.GraphQLAPIClient.EmployeeClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
